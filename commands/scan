#!/usr/bin/env bash
set -e
TIMEOUT=2
PATTERN=

if [ "$DEBUG" = 1 ]; then
    set -x
fi

usage() {
    EXAMPLES=$(examples 2>&1)
    cat << EOT >&2
Scan for local thin-edge.io device which have an Avahi service definition (mdns-sd)
The devices must be reachable via ssh on the local network.

USAGE
  c8y tedge scan <TIMEOUT>

ARGUMENTS
  TIMEOUT             Duration to wait for in seconds. Defaults to 2

FLAGS
  --page <STRING>   Which Device Management page to open. Defaults to device-info
  -h, --help        Show this help

$EXAMPLES

EOT
}

examples() {
    cat << EOT >&2
EXAMPLES

# Scan for local thin-edge.io devices on the local network
c8y tedge scan

# Scan for local thin-edge.io that start with rpi3
c8y tedge scan --pattern "rpi3"

EOT
}

#
# Parse args
#
while [ $# -gt 0 ]; do
    case "$1" in
        --examples)
            examples
            exit 0
            ;;
        --help|-h)
            usage
            exit 0
            ;;
        --pattern)
            PATTERN="$2"
            shift
            ;;
        --*|-*)
            printf '\nERROR: Unknown flag. %s\n\n' "$1" >&2
            usage
            exit 1
            ;;
        *)
            if [ -z "$TIMEOUT" ]; then
                TIMEOUT="${1:-2}"
            fi
            ;;
    esac
    shift
done

scan_tedge() {
    service_type="$1"
    FORMAT=
    if command -V dns-sd >/dev/null 2>&1; then
        OUTPUT=$(dns-sd -t "$TIMEOUT" -B "$service_type" local | tail +5)
        FORMAT=dns-sd
    elif command -V avahi-browse >/dev/null 2>&1; then
        OUTPUT=$(avahi-browse -d local "$service_type" -t)
        FORMAT=avahi-browse
    else
        echo "Missing dependency. Scanning for thin-edge.io devices requires either avahi-browse or dns-sd to be installed" >&2
        exit 1
    fi

    if [ "$service_type" = "_thin-edge_mqtt._tcp" ]; then
        # dns-sd type from original avahi service definition (which was using unsupported characters)
        DEVICES=$(echo "$OUTPUT" | grep -o "thin-edge.io ([a-zA-Z0-9-]*)" | cut -d' ' -f2- | tr -d '()' | sed 's/$/.local/g' | sort | uniq)
    else
        # new dns-sd type (which is compatible with systemd-resolved)
        case "$FORMAT" in
            dns-sd)
                DEVICES=$(echo "$OUTPUT" | awk '{print $7".local"}' | sort | uniq)
                ;;
            avahi-browse)
                # TODO: avahi-browser output is not yet known
                DEVICES=$(echo "$OUTPUT" | awk '{print $7".local"}' | sort | uniq)
                echo "Warning: avahi-browse is not yet supported. Please create a ticket on https://github.com/thin-edge/c8y-tedge" >&2
                ;;
        esac
        
    fi

    if [ -n "$PATTERN" ]; then
        echo "$DEVICES" | grep "$PATTERN"
    else
        echo "$DEVICES"
    fi
}

# Scan for both old and new types in parallel
{
    scan_tedge "_tedge._tcp" &
    scan_tedge "_thin-edge_mqtt._tcp" &
    wait
} | sort | uniq | grep -v "^$"
