#!/usr/bin/env bash
set -e
DEVICE_ID=
TARGET=
OPEN_WEBSITE=1
WEBSITE_PAGE="device-info"
SSH_USER=
SCAN=${SCAN:-0}
PATTERN="${PATTERN:-.+}"
BOOTSTRAP_TYPE="${BOOTSTRAP_TYPE:-}"

usage() {
    EXAMPLES=$(examples 2>&1)
    cat << EOT >&2
Bootstrap a thin-edge.io device using ssh.
The device must be reachable via ssh on the local network.

The supported bootstraping methods are described below:

Type: local-ca
1. Create local-ca (if one does not already exist)
2. On the device, create a CSR
3. Sign the CSR (on the host)
4. Copy the public certificate back to the device

Type: self-signed
1. Create the device certificate (if required)
2. Fetch public device certificate and upload it to Cumulocity IoT (private key does not leave the device)
3. Open the device in the Cumulocity IoT Device Management application

USAGE
  c8y tedge bootstrap <TARGET> [DEVICE_ID]

ARGUMENTS
  TARGET              Device hostname or ip to connect to via ssh. E.g. root@mydevice.local
  DEVICE_ID           Device id to be assigned to the device. This will only be used if the device
                      has not already been bootstrapped.

FLAGS
  --skip-website                    Don't open the Cumulocity IoT Device Management application
  --page <STRING>                   Which Device Management page to open. Defaults to device-info
  --type <local-ca|self-signed>     Certificate signing method. Accepts local-ca (default), self-signed
  --scan                            Bootstrap devices found by a scan
  --pattern <REGEX>                 Only include devices which match the given pattern (only applies when piping or scanning devices)
  --verbose                         Enable verbose logging
  --debug                           Enable debug logging
  -h, --help                        Show this help

$EXAMPLES

EOT
}

examples() {
    cat << EOT >&2
EXAMPLES

# Bootstrap a device via ssh
c8y tedge bootstrap root@mydevice.local

# Bootstrap a device via ssh using a self signed certificate
c8y tedge bootstrap root@mydevice.local --type self-signed

# Bootstrap a device via ssh but don't open the website
c8y tedge bootstrap root@mydevice.local --skip-website

# Bootstrap any devices found during a scan
c8y tedge bootstrap --ssh-user root --scan --pattern "rpi3"

EOT
}

#
# Parse args
#
while [ $# -gt 0 ]; do
    case "$1" in
        --examples)
            examples
            exit 0
            ;;
        --help|-h)
            usage
            exit 0
            ;;
        --page)
            WEBSITE_PAGE="$2"
            shift
            ;;
        --device-id)
            DEVICE_ID="$2"
            shift
            ;;
        --type)
            BOOTSTRAP_TYPE="$2"
            shift
            ;;
        --scan)
            SCAN=1
            ;;
        --pattern)
            PATTERN="$2"
            shift
            ;;
        --ssh-user)
            SSH_USER="$2"
            shift
            ;;
        --verbose|-v)
            export C8Y_SETTINGS_DEFAULTS_VERBOSE="true"
            ;;
        --debug)
            set -x
            export C8Y_SETTINGS_DEFAULTS_DEBUG="true"
            ;;
        --skip-website)
            OPEN_WEBSITE=0
            ;;
        *)
            if [ -z "$TARGET" ]; then
                TARGET="$1"
            elif [ -z "$DEVICE_ID" ]; then
                DEVICE_ID="$1"
            fi
    esac
    shift
done

# Load .env automatically
if [ -f .env ]; then
    echo "Loading .env file" >&2
    set -o allexport
    # shellcheck disable=SC1091
    . .env ||:
    set +o allexport
fi

# Set default bootstrap type (based on what dependencies are available)
if [ -z "$BOOTSTRAP_TYPE" ]; then
    if command -V openssl >/dev/null 2>&1; then
        BOOTSTRAP_TYPE=local-ca
    else
        BOOTSTRAP_TYPE=self-signed
    fi
fi

info() {
    if [ "$C8Y_SETTINGS_DEFAULTS_VERBOSE" = "true" ]; then
        printf "%s\tINFO\t%s" "$(date -Iseconds || true)" "$@" >&2
    fi
}

error() {
    printf "%s\tINFO\t%s" "$(date -Iseconds || true)" "$@" >&2
}

CA_CERT_FILE="${CA_CERT_FILE:-$HOME/tedge-ca.crt}"
CA_CERT_KEY="${CA_CERT_KEY:-$HOME/tedge-ca.key}"
LEAF_EXPIRE_DAYS=365

create_ca() {
    #
    # Create new ca (signing certificate)
    #
    CA_COMMON_NAME="${CA_COMMON_NAME:-"tedge-ca-$USER"}"
    CA_OU="${CA_OU:-dev}"
    CA_EXPIRE_DAYS="${CA_EXPIRE_DAYS:-365}"

    if [ -f "$CA_CERT_KEY" ] && [ -f "$CA_CERT_FILE" ]; then
        echo "Using existing CA certificate. cert=$CA_CERT_FILE" >&2
    else
        # CN=mkcert reubenmiller@SAG-LJWQ4P62TY (Reuben Miller), OU=reubenmiller@SAG-LJWQ4P62TY (Reuben Miller), O=mkcert development CA
        openssl req \
            -new \
            -x509 \
            -days "$CA_EXPIRE_DAYS" \
            -extensions v3_ca \
            -nodes \
            -subj "/O=thin-edge/OU=dev/CN=$CA_COMMON_NAME" \
            -keyout "$CA_CERT_KEY" \
            -out "$CA_CERT_FILE" >/dev/null 2>&1
    fi

    FINGERPRINT=$(openssl x509 -fingerprint -noout -in "$CA_CERT_FILE" | cut -d= -f2 | tr -d ':' | tr '[:upper:]' '[:lower:]')
    if c8y devicemanagement certificates get --id "$FINGERPRINT" >/dev/null 2>&1; then
        echo "Certificate has already been uploaded to c8y. fingerprint=$FINGERPRINT" >&2
        return
    fi

    if ! c8y devicemanagement certificates create \
        -n \
        --name "$CA_COMMON_NAME" \
        --autoRegistrationEnabled \
        --status ENABLED \
        --file "$CA_CERT_FILE" \
        --silentExit --silentStatusCodes 409; then
        echo "failed to upload device certificate" >&2
        exit 1
    fi
    echo "Uploaded certificate" >&2
}

create_remote_cert() {
    DEVICE_KEY_PATH=$("${EXEC_CMD[@]}" "$TARGET" tedge config get device.key_path)
    DEVICE_CERT_PATH=$("${EXEC_CMD[@]}" "$TARGET" tedge config get device.cert_path)

    if ! "${EXEC_CMD[@]}" "$TARGET" test -f "$DEVICE_KEY_PATH"; then
        info "Creating device private key"
        "${EXEC_CMD[@]}" "$TARGET" openssl genrsa -out "$DEVICE_KEY_PATH" 2048
    else
        info "Using existing private key"
    fi

    # Create Certificate Signing Request (CSR)
    DEVICE_CSR=$(
        "${EXEC_CMD[@]}" "$TARGET" openssl req \
            -key "$DEVICE_KEY_PATH" \
            -new \
            -subj "/O=thin-edge/OU=Test\ Device/CN=${DEVICE_ID}"
    )

    # Protect certificate (after csr is created)
    "${EXEC_CMD[@]}" "$TARGET" sudo chown mosquitto:root "$DEVICE_KEY_PATH"
    "${EXEC_CMD[@]}" "$TARGET" sudo chmod 600 "$DEVICE_KEY_PATH"

    # Sign the CSR
    CERT_EXT=$(cat << EOF
authorityKeyIdentifier=keyid
basicConstraints=CA:FALSE
keyUsage = digitalSignature, keyAgreement
extendedKeyUsage = serverAuth, clientAuth
subjectAltName=DNS:${TARGET},DNS:localhost
EOF
    )

    DEVICE_CERT_CHAIN="/tmp/${DEVICE_ID}.crt"
    openssl x509 -req \
        -in <(echo "$DEVICE_CSR") \
        -out "$DEVICE_CERT_CHAIN" \
        -CA "$CA_CERT_FILE" \
        -CAkey "$CA_CERT_KEY" \
        -extfile <(echo "$CERT_EXT") \
        -CAcreateserial \
        -days "$LEAF_EXPIRE_DAYS"

    # Build certificate chain (from leaf cert to the signing cert)
    cat "$CA_CERT_FILE" >> "$DEVICE_CERT_CHAIN"

    # Copy cert to device
    scp "$DEVICE_CERT_CHAIN" "$TARGET:/tmp/${DEVICE_ID}.crt"
    "${EXEC_CMD[@]}" "$TARGET" sudo mv "/tmp/${DEVICE_ID}.crt" "$DEVICE_CERT_PATH"
    "${EXEC_CMD[@]}" "$TARGET" sudo chown mosquitto:root "$DEVICE_CERT_PATH"
    "${EXEC_CMD[@]}" "$TARGET" sudo chmod 644 "$DEVICE_CERT_PATH"
}

create_self_signed() {
     # Create the device certificate, ignore any errors as this could have already happened
    # Generally the device cert should not be deleted, so just fail silently for now
    if [ -n "$DEVICE_ID" ]; then
        # Use the user given device-id
        "${EXEC_CMD[@]}" "$TARGET" tedge cert create --device-id "$DEVICE_ID" 2>/dev/null ||:
    else
        # Default to the hostname of the device
        # shellcheck disable=SC2016
        "${EXEC_CMD[@]}" "$TARGET" tedge cert create --device-id '$HOSTNAME' 2>/dev/null ||:
    fi

    # Get public cert
    PUBLIC_CERT=$("${EXEC_CMD[@]}" "$TARGET" cat "\$(tedge config get device.cert_path)")

    if [ -z "$PUBLIC_CERT" ]; then
        echo "Failed to get device certifate from $TARGET" >&2
        exit 1
    fi

    if [ -z "$DEVICE_ID" ]; then
        DEVICE_ID=$("${EXEC_CMD[@]}" "$TARGET" tedge config get device.id)
    fi

    FINGERPRINT=$("${EXEC_CMD[@]}" "$TARGET" tedge cert show | grep Thumbprint | cut -d' ' -f2 | tr '[:upper:]' '[:lower:]')
    if c8y devicemanagement certificates get --id "$FINGERPRINT" >/dev/null 2>&1; then
        echo "Certificate has already been uploaded to c8y. fingerprint=$FINGERPRINT" >&2
        return
    fi

    echo "Certificate CN: $DEVICE_ID" >&2
    if ! c8y devicemanagement certificates create \
        -n \
        --name "$DEVICE_ID" \
        --autoRegistrationEnabled \
        --status ENABLED \
        --file <(echo "$PUBLIC_CERT") \
        --silentExit --silentStatusCodes 409; then
        echo "failed to upload device certificate" >&2
        exit 1
    fi
}

get_device_id() {
    # Get identity (stop on first non empty value)
    target="$1"
    device_id="$2"
    _device_id_method=1
    while [ -z "$device_id" ]; do
        case "$_device_id_method" in
            1)
                # use the existing value
                info "Trying to get identity using tedge config"
                device_id=$("${EXEC_CMD[@]}" "$target" tedge config get device.id 2>/dev/null || true)
                ;;
            2)
                # try using tedge-identity
                info "Trying to get identity using tedge-identity"
                device_id=$("${EXEC_CMD[@]}" "$target" tedge-identity 2>/dev/null || true)
                ;;
            3)
                # hostname
                info "Trying to get identity using hostname"
                device_id=$("${EXEC_CMD[@]}" "$target" hostname 2>/dev/null || true)
                ;;
            *)
                break
                ;;
        esac
        ((_device_id_method++))
    done
    echo "$device_id"
}


EXEC_CMD=(
    ssh
    -n
)

do_action() {
    if [ $# -gt 0 ]; then
        TARGET="$1"
    fi
    if [ -n "$SSH_USER" ]; then
        TARGET="$SSH_USER@$TARGET"
    fi

    # TODO: Check if the device is already connected or not, otherwise this command will fail if the url is already set.
    # shellcheck disable=SC2029
    URL=
    if [ -n "$C8Y_DOMAIN" ]; then
        URL="$C8Y_DOMAIN"
    else
        URL=$(c8y sessions get --select host -o csv | sed -E 's|https?://||')
    fi

    # Disconnect if tedge is already connected
    # Note: Check if the mapper is configured or not but it can't be assumed that it is successfully configured
    EXISTING_C8Y_URL=$("${EXEC_CMD[@]}" "$TARGET" tedge config get c8y.url 2>/dev/null)
    if [ -n "$EXISTING_C8Y_URL" ]; then
        # TODO: Add option to abort if already bootstrapped (to prevent accidental)
        echo "tedge is already connected, so disconnecting before bootstrapping" >&2
        "${EXEC_CMD[@]}" "$TARGET" tedge disconnect c8y ||:
    fi

    "${EXEC_CMD[@]}" "$TARGET" tedge config set c8y.url "$URL"

    # Get identity
    DEVICE_ID=$(get_device_id "$TARGET" "$DEVICE_ID")
    if [ -z "$DEVICE_ID" ]; then
        echo "Could not detect a device id" >&2
        exit 1
    fi

    case "$BOOTSTRAP_TYPE" in
            self-signed)
                create_self_signed
                ;;
            local-ca)
                if ! command -V openssl >/dev/null 2>&1; then
                    echo "Missing dependency: openssl is not installed" >&2
                    exit 1
                fi
                create_ca
                create_remote_cert
                ;;
            *)
                echo "Unknown bootstrapping method" >&2
                exit 1
                ;;
    esac

    # Wait for certificate to be enabled
    if ! "${EXEC_CMD[@]}" "$TARGET" tedge connect c8y --test >/dev/null 2>&1; then
        sleep 2

        attempt=0
        max_attempts=10
        success=0
        while [ "$attempt" -lt "$max_attempts" ]; do
            if "${EXEC_CMD[@]}" "$TARGET" tedge connect c8y; then
                success=1
                break
            fi

            echo "Connection failed. Trying again in 5 seconds" >&2
            sleep 5
        done

        if [ "$success" = "1" ]; then
            echo "Successfully bootstrapped device" >&2
        else
            echo "Bootstrapping failed. Please check the console output for more details" >&2
        fi
    fi

    # Open device management page for the device
    if [ "$OPEN_WEBSITE" = 1 ]; then
        c8y identity get -n --name "$DEVICE_ID" | c8y applications open --application devicemanagement --page "$WEBSITE_PAGE"
    fi
}


DEVICES=()

if [ ! -t 0 ]; then
    echo "Reading from pipeline" >&2
    while IFS= read -r device; do
        if [ -n "$device" ] && [[ "${device}" =~ $PATTERN ]]; then
            DEVICES+=("$device")
        fi
    done < <(cat -)
elif [ "$SCAN" = 1 ]; then
    echo "Scanning for devices" >&2
    while read -r device; do
        if [ -n "$device" ] && [[ "${device}" =~ $PATTERN ]]; then
            DEVICES+=("$device")
        fi
    done < <(c8y tedge scan --timeout 2)
else
    echo "Using user provided device" >&2
    DEVICES+=("$TARGET")
fi


case "${#DEVICES[@]}" in
    0)
        echo "No devices were found" >&2
        ;;
    1)
        echo "Found ${#DEVICES[@]} device" >&2
        ;;
    *)
        echo "Found ${#DEVICES[@]} devices" >&2
        ;;
esac

for device in "${DEVICES[@]}"; do
    do_action "$device"
done
