#!/usr/bin/env bash
set -e
DEVICE_ID=
TARGET=
OPEN_WEBSITE=1
WEBSITE_PAGE="device-info"
SSH_USER=
SCAN=${SCAN:-0}
PATTERN="${PATTERN:-.+}"

usage() {
    EXAMPLES=$(examples 2>&1)
    cat << EOT >&2
Bootstrap a thin-edge.io device using ssh.
The device must be reachable via ssh on the local network.

The bootstrapping processes does:

* Create the device certificate (if required)
* Fetch public device certificate and upload it to Cumulocity IoT (private key does not leave the device)
* Open the device in the Cumulocity IoT Device Management application

USAGE
  c8y tedge bootstrap <TARGET> [DEVICE_ID]

ARGUMENTS
  TARGET              Device hostname or ip to connect to via ssh. E.g. root@mydevice.local
  DEVICE_ID           Device id to be assigned to the device. This will only be used if the device
                      has not already been bootstrapped.

FLAGS
  --skip-website      Don't open the Cumulocity IoT Device Management application
  --page <STRING>     Which Device Management page to open. Defaults to device-info
  --scan              Bootstrap devices found by a scan
  --pattern <REGEX>   Only include devices which match the given pattern (only applies when piping or scanning devices)
  --verbose           Enable verbose logging
  --debug             Enable debug logging
  -h, --help          Show this help

$EXAMPLES

EOT
}

examples() {
    cat << EOT >&2
EXAMPLES

# Bootstrap a device via ssh
c8y tedge bootstrap root@mydevice.local

# Bootstrap a device via ssh but don't open the website
c8y tedge bootstrap root@mydevice.local --skip-website

# Bootstrap any devices found during a scan
c8y tedge bootstrap --ssh-user root --scan --pattern "rpi3"

EOT
}

#
# Parse args
#
while [ $# -gt 0 ]; do
    case "$1" in
        --examples)
            examples
            exit 0
            ;;
        --help|-h)
            usage
            exit 0
            ;;
        --page)
            WEBSITE_PAGE="$2"
            shift
            ;;
        --device-id)
            DEVICE_ID="$2"
            shift
            ;;
        --scan)
            SCAN=1
            ;;
        --pattern)
            PATTERN="$2"
            shift
            ;;
        --ssh-user)
            SSH_USER="$2"
            shift
            ;;
        --verbose|-v)
            export C8Y_SETTINGS_DEFAULTS_VERBOSE="true"
            ;;
        --debug)
            set -x
            export C8Y_SETTINGS_DEFAULTS_DEBUG="true"
            ;;
        --skip-website)
            OPEN_WEBSITE=0
            ;;
        *)
            if [ -z "$TARGET" ]; then
                TARGET="$1"
            elif [ -z "$DEVICE_ID" ]; then
                DEVICE_ID="$1"
            fi
    esac
    shift
done

EXEC_CMD=(
    ssh
    -n
)

do_action() {
    if [ $# -gt 0 ]; then
        TARGET="$1"
    fi
    if [ -n "$SSH_USER" ]; then
        TARGET="$SSH_USER@$TARGET"
    fi

    # TODO: Check if the device is already connected or not, otherwise this command will fail if the url is already set.
    # shellcheck disable=SC2029
    "${EXEC_CMD[@]}" "$TARGET" tedge config set c8y.url "$C8Y_DOMAIN"

    # Create the device certificate, ignore any errors as this could have already happened
    # Generally the device cert should not be deleted, so just fail silently for now
    if [ -n "$DEVICE_ID" ]; then
        # Use the user given device-id
        "${EXEC_CMD[@]}" "$TARGET" tedge cert create --device-id "$DEVICE_ID" 2>/dev/null ||:
    else
        # Default to the hostname of the device
        "${EXEC_CMD[@]}" "$TARGET" tedge cert create --device-id '$HOSTNAME' 2>/dev/null ||:
    fi

    # Get public cert
    PUBLIC_CERT=$("${EXEC_CMD[@]}" "$TARGET" cat "\$(tedge config get device.cert_path)")

    if [ -z "$PUBLIC_CERT" ]; then
        echo "Failed to get device certifate from $TARGET" >&2
        exit 1
    fi

    if [ -z "$DEVICE_ID" ]; then
        DEVICE_ID=$("${EXEC_CMD[@]}" "$TARGET" tedge config get device.id)
    fi

    echo "Certificate CN: $DEVICE_ID" >&2
    if ! c8y devicemanagement certificates create \
        -n \
        --name "$DEVICE_ID" \
        --autoRegistrationEnabled \
        --status ENABLED \
        --file <(echo "$PUBLIC_CERT") \
        --silentExit --silentStatusCodes 409; then
        echo "failed to upload device certificate" >&2
        exit 1
    fi

    # Wait for certificate to be enabled
    if ! "${EXEC_CMD[@]}" "$TARGET" tedge connect c8y --test >/dev/null 2>&1; then
        sleep 2

        attempt=0
        max_attempts=10
        success=0
        while [ "$attempt" -lt "$max_attempts" ]; do
            if "${EXEC_CMD[@]}" "$TARGET" tedge connect c8y; then
                success=1
                break
            fi

            echo "Connection failed. Trying again in 5 seconds" >&2
            sleep 5
        done

        if [ "$success" = "1" ]; then
            echo "Successfully bootstrapped device" >&2
        else
            echo "Bootstrapping failed. Please check the console output for more details" >&2
        fi
    fi

    # Open device management page for the device
    if [ "$OPEN_WEBSITE" = 1 ]; then
        c8y identity get -n --name "$DEVICE_ID" | c8y applications open --application devicemanagement --page "$WEBSITE_PAGE"
    fi
}


DEVICES=()

if [ ! -t 0 ]; then
    echo "Reading from pipeline" >&2
    while IFS= read -r device; do
        if [ -n "$device" ] && [[ "${device}" =~ $PATTERN ]]; then
            DEVICES+=("$device")
        fi
    done < <(cat -)
elif [ "$SCAN" = 1 ]; then
    echo "Scanning for devices" >&2
    while read -r device; do
        if [ -n "$device" ] && [[ "${device}" =~ $PATTERN ]]; then
            DEVICES+=("$device")
        fi
    done < <(c8y tedge scan --timeout 2)
else
    echo "Using user provided device" >&2
    DEVICES+=("$TARGET")
fi

if [ "${#DEVICES[@]}" -gt 0 ]; then
    echo "Found ${#DEVICES[@]} devices" >&2
fi

for device in "${DEVICES[@]}"; do
    do_action "$device"
done
