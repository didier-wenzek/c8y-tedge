#!/usr/bin/env bash
set -e
DEVICE_ID=
TARGET=
OPEN_WEBSITE=1
WEBSITE_PAGE="device-info"
SCAN=${SCAN:-0}
PATTERN="${PATTERN:-.+}"
C8Y_TEDGE_CONTAINER_CLI="${C8Y_TEDGE_CONTAINER_CLI:-}"

usage() {
    EXAMPLES=$(examples 2>&1)
    cat << EOT >&2
Bootstrap a thin-edge.io container instance.
The container must be controllable via docker or docker compose

The bootstrapping processes does:

* Create the device certificate (if required)
* Fetch public device certificate and upload it to Cumulocity IoT (private key does not leave the device)
* Open the device in the Cumulocity IoT Device Management application

USAGE
  c8y tedge bootstrap-container <CONTAINER> [DEVICE_ID]

ARGUMENTS
  CONTAINER           Container name or compose service name, e.g. tedge
  DEVICE_ID           Device id to be assigned to the device. This will only be used if the device
                      has not already been bootstrapped. If one is not given, then a random name will be assigned

FLAGS
  --container-cli <STRING>    Container cli, e.g. docker, nerdctl, podman. Can also be set via the environment variable, C8Y_TEDGE_CONTAINER_CLI
  --skip-website              Don't open the Cumulocity IoT Device Management application
  --page <STRING>             Which Device Management page to open. Defaults to device-info
  --verbose                   Enable verbose logging
  --debug                     Enable debug logging
  -h, --help                  Show this help

$EXAMPLES

EOT
}

examples() {
    cat << EOT >&2
EXAMPLES

# Bootstrap a container using a randomly generated name
c8y tedge bootstrap-container container01

# Bootstrap a container using using a given device id
c8y tedge bootstrap-container container01 customname_001

# Bootstrap a device but don't open the website
c8y tedge bootstrap-container container01 --skip-website

# Bootstrap a device using podman 
c8y tedge bootstrap-container container01 --container-cli podman

# Bootstrap a device using nerdctl (by setting an environment variable)
export C8Y_TEDGE_CONTAINER_CLI=nerdctl
c8y tedge bootstrap-container container01

EOT
}

# Load .env automatically so it plays nicely with docker compose which also does this
# Load before parsing arguments so that explicit flags can override any set values
if [ -f .env ]; then
    echo "Loading .env file" >&2
    set -o allexport
    # shellcheck disable=SC1091
    . .env ||:
    set +o allexport
fi

#
# Parse args
#
while [ $# -gt 0 ]; do
    case "$1" in
        --examples)
            examples
            exit 0
            ;;
        --help|-h)
            usage
            exit 0
            ;;
        --page)
            WEBSITE_PAGE="$2"
            shift
            ;;
        --device-id)
            DEVICE_ID="$2"
            shift
            ;;
        --container-cli)
            C8Y_TEDGE_CONTAINER_CLI="$2"
            shift
            ;;
        --skip-website)
            OPEN_WEBSITE=0
            ;;
        --verbose|-v)
            export C8Y_SETTINGS_DEFAULTS_VERBOSE="true"
            ;;
        --debug)
            set -x
            export C8Y_SETTINGS_DEFAULTS_DEBUG="true"
            ;;
        --*|-*)
            printf '\nERROR: Unknown flag. %s\n\n' "$1" >&2
            usage
            exit 1
            ;;
        *)
            if [ -z "$TARGET" ]; then
                TARGET="$1"
            elif [ -z "$DEVICE_ID" ] && [ -n "$1" ]; then
                DEVICE_ID="$1"
            fi
    esac
    shift
done

# Try auto detecting container cli (based on what is available)
if [ -z "$C8Y_TEDGE_CONTAINER_CLI" ]; then
    if command -V docker >/dev/null 2>&1; then
        C8Y_TEDGE_CONTAINER_CLI=docker
    elif command -V nerdctl >/dev/null 2>&1; then
        C8Y_TEDGE_CONTAINER_CLI=nerdctl
    elif command -V podman >/dev/null 2>&1; then
        C8Y_TEDGE_CONTAINER_CLI=podman
    fi
fi

if [ -z "$C8Y_TEDGE_CONTAINER_CLI" ]; then
    echo "Error: Could not find a container cli, e.g. docker, nerdctl, podman" >&2
    exit 1
fi

echo "Using container cli: $C8Y_TEDGE_CONTAINER_CLI" >&2

container_check() {
    name="$1"
    "$C8Y_TEDGE_CONTAINER_CLI" ps -a --format '{{.State}}' --filter name="$name"
}

container_service_check() {
    name="$1"
    # Note: docker compose introduced support for using templates in the --format flag
    # which allows the service check to be done without additional dependencies.
    # Newer docker compose supports --format <template>, whereas older versions only support --format <json|pretty>
    #
    if "$C8Y_TEDGE_CONTAINER_CLI" compose ps -a --format '{{.State}}' "$1" >/dev/null 2>/dev/null; then
        # New docker compose ps style
        "$C8Y_TEDGE_CONTAINER_CLI" compose ps -a --format '{{.State}}' "$1"
    elif command -V jq >/dev/null 2>&1; then
        # Prefer parsing output with jq if available
        "$C8Y_TEDGE_CONTAINER_CLI" compose ps -a --format 'json' "$1" | jq -r '.[].State'
    else
        # Fallback to parsing with sed
        "$C8Y_TEDGE_CONTAINER_CLI" compose ps -a --format 'json' "$1" | sed 's/.*"State":"\([a-zA-Z0-9]*\)".*/\1/g'
    fi
}


wait_for_container() {
    # Wait for container to be ready (or skip if it has already exited)
    container_name="$1"
    COUNTER=1
    TIMEOUT=60
    BOOTSTRAP=1

    DONE=0
    while [ "$DONE" -eq 0 ]; do
        
        state="$("${CHECK_CMD[@]}" "$container_name")"
        case "$state" in
            running)
                DONE=1
                ;;
            exited)
                DONE=1
                BOOTSTRAP=0
                # echo "tedge service is already running (bootstrapping was probably already done)" >&2
                ;;
            *)
                if [ "$COUNTER" -gt "$TIMEOUT" ]; then
                    DONE=0
                    BOOTSTRAP=2
                    break
                fi

                echo "$container_name is not yet running...attempt $COUNTER of $TIMEOUT" >&2
                sleep 1
                COUNTER=$((COUNTER + 1))
                ;;
        esac
    done
    echo "$BOOTSTRAP"
}


do_action() {
    if [ $# -gt 0 ]; then
        TARGET="$1"
    fi

    # Default to container cli
    EXEC_CMD=(
        "$C8Y_TEDGE_CONTAINER_CLI"
        exec
    )
    CHECK_CMD=(
        container_check
    )

    # Detect docker or docker-compose logic
    # Auto detect a local docker-compose file and use the service name instead
    if [ -f "$COMPOSE_FILE" ] || [ -f docker-compose.yaml ] || [ -f docker-compose.yml ]; then
        echo "Detected a docker-compose file. Checking if '$TARGET' is a service or a container name" >&2

        if [ -n "$TARGET" ]; then
            # Check if the the user provided a container name or the compose service name
            # If the user provided a container name, then stick with user docker cli (rather than docker compose)
            if container_service_check "$TARGET" >/dev/null 2>&1; then
                echo "User provided compose service name: $TARGET" >&2
                EXEC_CMD=(
                    "$C8Y_TEDGE_CONTAINER_CLI"
                    compose
                    exec
                    --no-TTY
                )

                CHECK_CMD=(
                    container_service_check
                )
            else
                echo "User provided container name: $TARGET" >&2
            fi
        fi
    fi

    if [ -z "$DEVICE_ID" ]; then
        DEVICE_ID=$(c8y template execute -n --template "'tedge_' + _.Hex(7)")
        echo "Using randomized device name: $DEVICE_ID" >&2
    fi

    # TODO: Check if the device is already connected or not, otherwise this command will fail if the url is already set.
    # shellcheck disable=SC2029
    URL=
    if [ -n "$C8Y_DOMAIN" ]; then
        URL="$C8Y_DOMAIN"
    else
        URL=$(c8y sessions get --select host -o csv | sed -E 's|https?://||')
    fi

    container_result=$(wait_for_container "$TARGET")
    case "$container_result" in
        0)
            echo "Container has already been bootstrapped" >&2
            exit 0
            ;;
        1)
            echo "Container ($TARGET) is ready for bootstrapping" >&2
            ;;
        *)
            echo "Timed out waiting for bootstrap service to be ready" >&2
            exit 1
            ;;
    esac

    "${EXEC_CMD[@]}" "$TARGET" tedge config set c8y.url "$URL"

    # Create the device certificate, ignore any errors as this could have already happened
    # Generally the device cert should not be deleted, so just fail silently for now
    if [ -n "$DEVICE_ID" ]; then
        # Use the user given device-id
        "${EXEC_CMD[@]}" "$TARGET" tedge cert create --device-id "$DEVICE_ID" 2>/dev/null ||:
    else
        # Default to the hostname of the device
        # shellcheck disable=SC2016
        "${EXEC_CMD[@]}" "$TARGET" tedge cert create --device-id '${DEVICE_ID:-tedge_$(hostname)}' 2>/dev/null ||:
    fi

    # Get public cert
    PUBLIC_CERT=$("${EXEC_CMD[@]}" "$TARGET" /bin/sh -c "cat \$(tedge config get device.cert_path)")

    if [ -z "$PUBLIC_CERT" ]; then
        echo "Failed to get device certifate from $TARGET" >&2
        exit 1
    fi

    if [ -z "$DEVICE_ID" ]; then
        DEVICE_ID=$("${EXEC_CMD[@]}" "$TARGET" tedge config get device.id)
    fi

    echo "Certificate CN: $DEVICE_ID" >&2
    if ! c8y devicemanagement certificates create \
        -n \
        --name "$DEVICE_ID" \
        --autoRegistrationEnabled \
        --status ENABLED \
        --file <(echo "$PUBLIC_CERT") \
        --silentExit --silentStatusCodes 409 \
        --force; then
        echo "failed to upload device certificate" >&2
        exit 1
    fi

    # Wait for certificate to be enabled
    if ! "${EXEC_CMD[@]}" "$TARGET" tedge connect c8y --test >/dev/null 2>&1; then
        sleep 2

        attempt=0
        max_attempts=10
        success=0
        while [ "$attempt" -lt "$max_attempts" ]; do
            if "${EXEC_CMD[@]}" "$TARGET" tedge connect c8y; then
                success=1
                break
            fi

            echo "Connection failed. Trying again in 5 seconds" >&2
            sleep 5
        done

        if [ "$success" = "1" ]; then
            echo "Successfully bootstrapped device" >&2
        else
            echo "Bootstrapping failed. Please check the console output for more details" >&2
        fi
    fi

    # Open device management page for the device
    if [ "$OPEN_WEBSITE" = 1 ]; then
        if ! c8y identity get -n --name "$DEVICE_ID" | c8y applications open --application devicemanagement --page "$WEBSITE_PAGE"; then
            echo "WARNING: Couldn't open device in webbrowser (this will not result in an error)"
        fi
    fi
}


DEVICES=()

if [ ! -t 0 ] && [ -z "$CI" ]; then
    echo "Reading from pipeline" >&2
    while IFS= read -r device; do
        if [ -n "$device" ] && [[ "${device}" =~ $PATTERN ]]; then
            DEVICES+=("$device")
        fi
    done < <(cat -)
else
    echo "Using user provided device" >&2
    DEVICES+=("$TARGET")
fi

if [ "${#DEVICES[@]}" -gt 0 ]; then
    echo "Found ${#DEVICES[@]} devices" >&2
fi

for device in "${DEVICES[@]}"; do
    do_action "$device"
done
